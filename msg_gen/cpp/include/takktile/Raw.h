/* Auto-generated by genmsg_cpp for file /home/ljentoft/Dropbox/TakkTile/tech/takktile/msg/Raw.msg */
#ifndef TAKKTILE_MESSAGE_RAW_H
#define TAKKTILE_MESSAGE_RAW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace takktile
{
template <class ContainerAllocator>
struct Raw_ {
  typedef Raw_<ContainerAllocator> Type;

  Raw_()
  : pressure()
  , temp()
  {
  }

  Raw_(const ContainerAllocator& _alloc)
  : pressure(_alloc)
  , temp(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pressure_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  pressure;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _temp_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  temp;


  typedef boost::shared_ptr< ::takktile::Raw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::takktile::Raw_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Raw
typedef  ::takktile::Raw_<std::allocator<void> > Raw;

typedef boost::shared_ptr< ::takktile::Raw> RawPtr;
typedef boost::shared_ptr< ::takktile::Raw const> RawConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::takktile::Raw_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::takktile::Raw_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace takktile

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::takktile::Raw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::takktile::Raw_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::takktile::Raw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b38c36fc45d3cf8e8951467b625f085b";
  }

  static const char* value(const  ::takktile::Raw_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb38c36fc45d3cf8eULL;
  static const uint64_t static_value2 = 0x8951467b625f085bULL;
};

template<class ContainerAllocator>
struct DataType< ::takktile::Raw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "takktile/Raw";
  }

  static const char* value(const  ::takktile::Raw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::takktile::Raw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# message format for raw sensor data\n\
float32[] pressure\n\
float32[] temp\n\
\n\
";
  }

  static const char* value(const  ::takktile::Raw_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::takktile::Raw_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pressure);
    stream.next(m.temp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Raw_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::takktile::Raw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::takktile::Raw_<ContainerAllocator> & v) 
  {
    s << indent << "pressure[]" << std::endl;
    for (size_t i = 0; i < v.pressure.size(); ++i)
    {
      s << indent << "  pressure[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pressure[i]);
    }
    s << indent << "temp[]" << std::endl;
    for (size_t i = 0; i < v.temp.size(); ++i)
    {
      s << indent << "  temp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temp[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TAKKTILE_MESSAGE_RAW_H

