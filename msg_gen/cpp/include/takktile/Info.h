/* Auto-generated by genmsg_cpp for file /home/ljentoft/Dropbox/TakkTile/tech/takktile/msg/Info.msg */
#ifndef TAKKTILE_MESSAGE_INFO_H
#define TAKKTILE_MESSAGE_INFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point32.h"

namespace takktile
{
template <class ContainerAllocator>
struct Info_ {
  typedef Info_<ContainerAllocator> Type;

  Info_()
  : frame_id()
  , xyz()
  , indexes()
  {
  }

  Info_(const ContainerAllocator& _alloc)
  : frame_id(_alloc)
  , xyz(_alloc)
  , indexes(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frame_id;

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _xyz_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  xyz;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _indexes_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  indexes;


  typedef boost::shared_ptr< ::takktile::Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::takktile::Info_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Info
typedef  ::takktile::Info_<std::allocator<void> > Info;

typedef boost::shared_ptr< ::takktile::Info> InfoPtr;
typedef boost::shared_ptr< ::takktile::Info const> InfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::takktile::Info_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::takktile::Info_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace takktile

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::takktile::Info_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::takktile::Info_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::takktile::Info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "af95a22ea653c538e436a3bdf31ec9e4";
  }

  static const char* value(const  ::takktile::Info_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaf95a22ea653c538ULL;
  static const uint64_t static_value2 = 0xe436a3bdf31ec9e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::takktile::Info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "takktile/Info";
  }

  static const char* value(const  ::takktile::Info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::takktile::Info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# message format for raw sensor data\n\
string frame_id\n\
geometry_msgs/Point32[] xyz\n\
uint8[] indexes\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::takktile::Info_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::takktile::Info_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.frame_id);
    stream.next(m.xyz);
    stream.next(m.indexes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Info_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::takktile::Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::takktile::Info_<ContainerAllocator> & v) 
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "xyz[]" << std::endl;
    for (size_t i = 0; i < v.xyz.size(); ++i)
    {
      s << indent << "  xyz[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.xyz[i]);
    }
    s << indent << "indexes[]" << std::endl;
    for (size_t i = 0; i < v.indexes.size(); ++i)
    {
      s << indent << "  indexes[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.indexes[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TAKKTILE_MESSAGE_INFO_H

